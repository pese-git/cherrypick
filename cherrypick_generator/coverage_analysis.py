#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è CherryPick Generator
"""

import re
import os

def analyze_lcov_file(lcov_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç LCOV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è"""
    
    if not os.path.exists(lcov_path):
        print(f"‚ùå LCOV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {lcov_path}")
        return
    
    with open(lcov_path, 'r') as f:
        content = f.read()
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ —Ñ–∞–π–ª–∞–º
    file_sections = content.split('SF:')[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å–µ–∫—Ü–∏—é
    
    total_lines = 0
    total_hit = 0
    files_coverage = {}
    
    for section in file_sections:
        lines = section.strip().split('\n')
        if not lines:
            continue
            
        file_path = lines[0]
        file_name = os.path.basename(file_path)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
        da_lines = [line for line in lines if line.startswith('DA:')]
        
        file_total = len(da_lines)
        file_hit = 0
        
        for da_line in da_lines:
            # DA:line_number,hit_count
            parts = da_line.split(',')
            if len(parts) >= 2:
                hit_count = int(parts[1])
                if hit_count > 0:
                    file_hit += 1
        
        if file_total > 0:
            coverage_percent = (file_hit / file_total) * 100
            files_coverage[file_name] = {
                'total': file_total,
                'hit': file_hit,
                'percent': coverage_percent
            }
            
            total_lines += file_total
            total_hit += file_hit
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    overall_percent = (total_hit / total_lines) * 100 if total_lines > 0 else 0
    
    print("üìä –ê–ù–ê–õ–ò–ó –ü–û–ö–†–´–¢–ò–Ø –¢–ï–°–¢–ê–ú–ò CHERRYPICK GENERATOR")
    print("=" * 60)
    
    print(f"\nüéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: {total_lines}")
    print(f"   –ü–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏: {total_hit}")
    print(f"   –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {overall_percent:.1f}%")
    
    print(f"\nüìÅ –ü–û–ö–†–´–¢–ò–ï –ü–û –§–ê–ô–õ–ê–ú:")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –ø–æ–∫—Ä—ã—Ç–∏—è
    sorted_files = sorted(files_coverage.items(), key=lambda x: x[1]['percent'], reverse=True)
    
    for file_name, stats in sorted_files:
        percent = stats['percent']
        hit = stats['hit']
        total = stats['total']
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        if percent >= 80:
            emoji = "‚úÖ"
        elif percent >= 50:
            emoji = "üü°"
        else:
            emoji = "‚ùå"
            
        print(f"   {emoji} {file_name:<25} {hit:>3}/{total:<3} ({percent:>5.1f}%)")
    
    print(f"\nüèÜ –†–ï–ô–¢–ò–ù–ì –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    core_files = ['bind_spec.dart', 'bind_parameters_spec.dart', 'generated_class.dart']
    utils_files = ['metadata_utils.dart']
    generator_files = ['module_generator.dart', 'inject_generator.dart']
    
    def calculate_group_coverage(file_list):
        group_total = sum(files_coverage.get(f, {}).get('total', 0) for f in file_list)
        group_hit = sum(files_coverage.get(f, {}).get('hit', 0) for f in file_list)
        return (group_hit / group_total * 100) if group_total > 0 else 0
    
    core_coverage = calculate_group_coverage(core_files)
    utils_coverage = calculate_group_coverage(utils_files)
    generators_coverage = calculate_group_coverage(generator_files)
    
    print(f"   üîß Core Components:  {core_coverage:>5.1f}%")
    print(f"   üõ†Ô∏è  Utils:           {utils_coverage:>5.1f}%") 
    print(f"   ‚öôÔ∏è  Generators:      {generators_coverage:>5.1f}%")
    
    print(f"\nüìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    # –§–∞–π–ª—ã —Å –Ω–∏–∑–∫–∏–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
    low_coverage = [(f, s) for f, s in files_coverage.items() if s['percent'] < 50]
    if low_coverage:
        print("   üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
        for file_name, stats in sorted(low_coverage, key=lambda x: x[1]['percent']):
            print(f"      ‚Ä¢ {file_name} ({stats['percent']:.1f}%)")
    
    # –§–∞–π–ª—ã –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
    zero_coverage = [(f, s) for f, s in files_coverage.items() if s['percent'] == 0]
    if zero_coverage:
        print("   ‚ùó –¢—Ä–µ–±—É—é—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è:")
        for file_name, stats in zero_coverage:
            print(f"      ‚Ä¢ {file_name} (0% –ø–æ–∫—Ä—ã—Ç–∏—è)")
    
    print(f"\n‚ú® –î–û–°–¢–ò–ñ–ï–ù–ò–Ø:")
    high_coverage = [(f, s) for f, s in files_coverage.items() if s['percent'] >= 80]
    if high_coverage:
        print("   üèÖ –û—Ç–ª–∏—á–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        for file_name, stats in sorted(high_coverage, key=lambda x: x[1]['percent'], reverse=True):
            print(f"      ‚Ä¢ {file_name} ({stats['percent']:.1f}%)")
    
    return files_coverage, overall_percent

if __name__ == "__main__":
    lcov_path = "coverage/lcov.info"
    analyze_lcov_file(lcov_path)
